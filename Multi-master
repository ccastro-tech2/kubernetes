Criando cluster multi-master com hproxy

Vamos criar 6 t2-medium instancias da AWS onde 3 serão master e as outras 3 serão workers

também vamos t2.micro para ser nosso hproxy com security group k8s-multi-master-2020

Primeiro vamos configurar o haproxy com os comandos

/home/ubuntu# hostname k8s-haproxy-01
/home/ubuntu# echo "k8s-ha-proxy-01" > /etc/hostname
/home/ubuntu# bash


configuração do haproxy

global
        log /dev/log    local0
        log /dev/log    local1 notice
        chroot /var/lib/haproxy
        stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners
        stats timeout 30s
        user haproxy
        group haproxy
        daemon

        # Default SSL material locations
        ca-base /etc/ssl/certs
        crt-base /etc/ssl/private

        # Default ciphers to use on SSL-enabled listening sockets.
        # For more information, see ciphers(1SSL). This list is from:
        #  https://hynek.me/articles/hardening-your-web-servers-ssl-ciphers/
        # An alternative list with additional directives can be obtained from
        #  https://mozilla.github.io/server-side-tls/ssl-config-generator/?server=haproxy
        ssl-default-bind-ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:RSA+AESGCM:RSA+AES:!aNULL:!MD5:!DSS
        ssl-default-bind-options no-sslv3

defaults
        log     global
        mode    http
        option  httplog
        option  dontlognull
        timeout connect 5000
        timeout client  50000
        timeout server  50000
        errorfile 400 /etc/haproxy/errors/400.http
        errorfile 403 /etc/haproxy/errors/403.http
        errorfile 408 /etc/haproxy/errors/408.http
        errorfile 500 /etc/haproxy/errors/500.http
        errorfile 502 /etc/haproxy/errors/502.http
        errorfile 503 /etc/haproxy/errors/503.http
        errorfile 504 /etc/haproxy/errors/504.http

frontend kubernetes
        mode tcp
        bind 172.31.85.206:6443
        option tcplog
        default_backend k8s-masters

backend k8s-masters
        mode tcp
        balance roundrobin
        option tcp-check
        server k8s-master-0 172.31.4.112:6443 check fall 3 rise 2
        server k8s-master-1 172.31.13.83:6443 check fall 3 rise 2
        server k8s-master-2 172.31.13.6:6443 check fall 3 rise 2



Validação
root@k8s-haproxy-01:/etc/haproxy# vim haproxy.cfg
root@k8s-haproxy-01:/etc/haproxy# netstat -atunp
Active Internet connections (servers and established)
Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name
tcp        0      0 172.31.85.206:6443      0.0.0.0:*               LISTEN      2937/haproxy
tcp        0      0 127.0.0.53:53           0.0.0.0:*               LISTEN      616/systemd-resolve
tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      883/sshd
tcp        0      0 127.0.0.1:6010          0.0.0.0:*               LISTEN      1759/sshd: ubuntu@p
tcp        0      0 172.31.85.206:22        186.220.223.30:55601    ESTABLISHED 1762/sshd: ubuntu [
tcp        0    292 172.31.85.206:22        186.220.223.30:55600    ESTABLISHED 1647/sshd: ubuntu [
tcp6       0      0 :::22                   :::*                    LISTEN      883/sshd
tcp6       0      0 ::1:6010                :::*                    LISTEN      1759/sshd: ubuntu@p
udp        0      0 127.0.0.53:53           0.0.0.0:*                           616/systemd-resolve
udp        0      0 172.31.85.206:68        0.0.0.0:*                           603/systemd-network




verificação de log
tail -f /var/log/haproxy.log


HAPROXY
root@k8s-haproxy-01:/etc/haproxy# netstat -atunp
Active Internet connections (servers and established)
Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name
tcp        0      0 172.31.85.206:6443      0.0.0.0:*               LISTEN      2937/haproxy
tcp        0      0 127.0.0.53:53           0.0.0.0:*               LISTEN      616/systemd-resolve
tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      883/sshd
tcp        0      0 127.0.0.1:6010          0.0.0.0:*               LISTEN      1759/sshd: ubuntu@p
tcp        0      0 172.31.85.206:22        186.220.223.30:55601    ESTABLISHED 1762/sshd: ubuntu [
tcp        0    212 172.31.85.206:22        186.220.223.30:55600    ESTABLISHED 1647/sshd: ubuntu [
tcp6       0      0 :::22                   :::*                    LISTEN      883/sshd
tcp6       0      0 ::1:6010                :::*                    LISTEN      1759/sshd: ubuntu@p
udp        0      0 127.0.0.53:53           0.0.0.0:*                           616/systemd-resolve
udp        0      0 172.31.85.206:68        0.0.0.0:*                           603/systemd-network
root@k8s-haproxy-01:/etc/haproxy# nc -v 172.31.85.206 6443
Connection to 172.31.85.206 6443 port [tcp/*] succeeded!


nos master colocar o ip do haproxy no /etc/hosts
ip k8s-master
